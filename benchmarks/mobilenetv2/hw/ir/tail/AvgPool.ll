; ModuleID = 'AvgPool.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define void @Avg_Pooling() #0 {
  br label %.preheader

.preheader:                                       ; preds = %0, %.preheader
  %hdx.07 = phi i32 [ 0, %0 ], [ %149, %.preheader ]
  %jdx.06 = phi i32 [ 0, %0 ], [ %160, %.preheader ]
  %1 = zext i32 %hdx.07 to i64
  %2 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %1
  %3 = load volatile i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = add i32 %hdx.07, 1
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %6
  %8 = load volatile i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = add nuw nsw i32 %9, %4
  %11 = add i32 %hdx.07, 2
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %12
  %14 = load volatile i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %15, %10
  %17 = add i32 %hdx.07, 3
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %18
  %20 = load volatile i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = add nuw nsw i32 %21, %16
  %23 = add i32 %hdx.07, 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %24
  %26 = load volatile i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add nuw nsw i32 %27, %22
  %29 = add i32 %hdx.07, 5
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %30
  %32 = load volatile i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add nuw nsw i32 %33, %28
  %35 = add i32 %hdx.07, 6
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %36
  %38 = load volatile i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = add nuw nsw i32 %39, %34
  %41 = add i32 %hdx.07, 7
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %42
  %44 = load volatile i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = add i32 %45, %40
  %47 = add i32 %hdx.07, 8
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %48
  %50 = load volatile i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add i32 %51, %46
  %53 = add i32 %hdx.07, 9
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %54
  %56 = load volatile i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = add i32 %57, %52
  %59 = add i32 %hdx.07, 10
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %60
  %62 = load volatile i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add i32 %63, %58
  %65 = add i32 %hdx.07, 11
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %66
  %68 = load volatile i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = add i32 %69, %64
  %71 = add i32 %hdx.07, 12
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %72
  %74 = load volatile i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = add i32 %75, %70
  %77 = add i32 %hdx.07, 13
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %78
  %80 = load volatile i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = add i32 %81, %76
  %83 = add i32 %hdx.07, 14
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %84
  %86 = load volatile i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add i32 %87, %82
  %89 = add i32 %hdx.07, 15
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %90
  %92 = load volatile i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add i32 %93, %88
  %95 = add i32 %hdx.07, 16
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %96
  %98 = load volatile i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add i32 %99, %94
  %101 = add i32 %hdx.07, 17
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %102
  %104 = load volatile i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = add i32 %105, %100
  %107 = add i32 %hdx.07, 18
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %108
  %110 = load volatile i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add i32 %111, %106
  %113 = add i32 %hdx.07, 19
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %114
  %116 = load volatile i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = add i32 %117, %112
  %119 = add i32 %hdx.07, 20
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %120
  %122 = load volatile i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add i32 %123, %118
  %125 = add i32 %hdx.07, 21
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %126
  %128 = load volatile i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = add i32 %129, %124
  %131 = add i32 %hdx.07, 22
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %132
  %134 = load volatile i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = add i32 %135, %130
  %137 = add i32 %hdx.07, 23
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %138
  %140 = load volatile i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = add i32 %141, %136
  %143 = add i32 %hdx.07, 24
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* inttoptr (i64 789258065 to i8*), i64 %144
  %146 = load volatile i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = add i32 %147, %142
  %149 = add nuw nsw i32 %hdx.07, 25
  %sext = mul i32 %148, 10682368
  %150 = ashr exact i32 %sext, 16
  %151 = lshr i32 %150, 12
  %152 = trunc i32 %151 to i16
  %153 = icmp slt i16 %152, 255
  %154 = trunc i32 %151 to i16
  %155 = icmp slt i16 %154, 0
  %156 = and i1 %153, %155
  %157 = trunc i32 %151 to i8
  %158 = select i1 %153, i8 %157, i8 -1
  %159 = select i1 %156, i8 0, i8 %158
  store volatile i8 %159, i8* inttoptr (i64 788942912 to i8*), align 64
  %160 = add nuw nsw i32 %jdx.06, 1
  %exitcond9 = icmp eq i32 %160, 1280
  br i1 %exitcond9, label %161, label %.preheader

; <label>:161                                     ; preds = %.preheader
  ret void
}

attributes #0 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.8.1 "}
